マークについて
m{letter}コマンドでマークをすることができる。
ジャンプするときは`{letter}で可能。

一度マークを設定したら、vimを閉じた後もすぐにジャンプすることができるようになる。
_(アンダーバー)は、削除専用コマンドで、レジスタに影響を与えない。
このため、ヤンクした後削除したいものがあったら"_d{motion}とすれば良い。
※もちろんドットの公式も使える。

"{register}を前置することで、使いたいレジスタを指定できる。
指定がなかったら、無名レジスタが使われる。

例えば、"ayiwをしたら"aにヤンクしたデータが入り、"bddとすればbにデリートした行が入る。
"apとすればヤンクしたデータが、"bpとすればデリートしたデータが入る。
いつも使っているyyやddとかは、"{register}で指定していないので、
無名レジスタに格納されていたことになる。

"0はヤンクレジスタである。
つまり、yyとかyiwとかしたら、無名レジスタと"0レジスタにコピーされる。つまり……
yiwでコピーした後、置換したい部分にカーソルを合わせてdw
その後、h"0pとすれば貼付けすることができる。
無名レジスタはdwによって上書きされるが、"0に格納されている値は
ヤンクレジスタのため変更されない。これをうまく利用すればよい。

~~寄り道~~
複数の単語を置き換えるときはどうしたらいいんだろう？
今のところの考察の結果
the_vim_way/1_copy_content.txt
waitingをcontentに置き換えるのを３つやることを想定した場合
yiw(ヤンク)ww(移動)qa(マクロ開始)vepyiw(貼り付けて再ヤンク)
n@a(移動して実行)n@@(二回目移行は@@で省略)
つなげると
yiwwwqavepyiwn@an@@
……うん。これは明らかに違うな。もっといい方法ありそうだが
~~追記~~
スッキリ実行する方法わかりました。
yiwでコピーした後、wwで移動して、
cw
<C-r>0
<C-[>
で貼り付けて抜ける。
こうすることでドットの公式一回分になるので繰り返せる!!!

"%=現在のファイルのファイル名 
"#=代替ファイルのファイル名
".=直前に挿入されたテキスト

vepで貼付けをすることができる。
しかし、これには副作用があり、ビジュアルモード中にpを使うと、
getClipboard()とsetClipboard()の両方が呼ばれてしまう。
しかし、これを逆手に取ってうまく利用することもできる。
以下の文を入れ替えると考えたとき。
I like fish and chips.
実践vim記載のやり方は
fcdemmwwvep`mp
自分が思いついたやり方は、
fcyiwwwvepbbvep
マークを使うか否かの違いだ。
これについての考察は後ほどまとめてみる。

テキスト挿入について
pはカーソル位置にある文字の後ろにテキストが挿入される。
一方、Pはカーソル位置の前にテキストを挿入する。

以下のtrのタグだけをコピーしようとした場合、
<table>
	<tr>
		<td>Keystrokes</td>
		<td>buffer Content</td>
	</tr>
</table>

trにカーソルを合わせて、yVat gPで貼り付けができる。

y=ヤンク
V=行選択
at=タグを含めてコピー
gP=カーソルの上に行単位で貼り付ける

pasteについて。
ターミナルのvimでは、デフォルトでは貼り付けた時pasteオプションが無効になっている。
このため、オートインデントをONにすると、システムのクリップボードから
貼り付けた時(<C-A-v>)、インデントが崩れてしまう。

対策としては、pasteオプションをオンにすることでインデント崩れを回避できる。
:set pastetoggle=<f5>とすることで、f5でこの設定を切り替えすることが可能。
基本的にはoffにするべき。
