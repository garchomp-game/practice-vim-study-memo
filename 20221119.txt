TIP64: マクロの記録と実行
例えば以下のコードがあったとする。
foo = 1
bar = 'a'
foobar = foo + bar

fooのところにカーソルを合わせて
qaA;<C-[>Ivar<C-[>q
マクロ登録したら後は
j@aj@@
で繰り返すだけでvarとセミコロン入れられる。

the_vim_way/3_concat.js
上記では、前後の+にスペースを入れるのをやった。
デフォルトの例では２つだったが、これが５つになるとどうなるか?
;.を多くの回数繰り返さあ無いといけない。
;の条件に合致するものが変更範囲しか無いのであれば、qq;.q(qa;.qでも良い)で登録して
22@qなどとすることで、一気に複数回繰り返すことができる。
ここで繰り返す範囲を超えて対象のものが存在しない場合に限り多めの適当な数字を
採用できることに注意をする

~~補足~~
tildeopがオフの時、~を入力したらカーソル下の文字を大文字にし次に進む。
オンのときは、~{motion}となる。
なお、g~{motion}はオフのときでも動作する。

macros/consecutive-lines.txt
マクロでドットと単語の先頭を大文字にする場合、
qa
0f.(0が大事!)
r)
w~(単語の先頭に移動してカーソルの文字を大文字にして次へ)
jq(jで下に下がってからマクロ終了するところがポイント)
後は3@aでOK.
0で先頭にカーソルが行くようにしている。
これをマクロにおいては(正規化)と呼ぶ。
正規化をすることで、繰り返し性が高まる。
また、f.としている点にも注目。あえてl(エル)とするのではなく、
f.とすることで、桁数が増えても対応できる。これを安全装置と呼ぶ。
マクロを組む上では、正規化と安全装置を意識することが大事になってくる。

macros/broken-lines.txt
たとえば、複数の行の間にマクロが実行できない行があったらどうなるだろうか？
この場合は、マクロが実行できない行で失敗し、それ移行は実行されない。

そしたら、どうしたらいいだろうか？
答えは簡単で、Vで行選択ビジュアルモードになり、一番下まで選択する(VG)
そのあと:でビジュアルコマンドモードに入り、normal @aを実行すれば
対象の行全てにマクロが実行される。

qAを入力すると、qaのマクロに追記することができる。
マクロの内容がミスったとしても、追記するだけで済むので非常に便利。
しかし、これはあくまでもマクロの最後に追記すればなんとかなる場合に限る。

TIP69
macros/ruby_module/animal.rb
自分の予想
qagg/class<CR>VG>Omodule Rank<C-[>Goend<C-[>q
本に書いてあったやり方
qagg/class<CR>Omodule Rank<C-[>j>GGoend<C-[>q

ポイントは以下
・gg/class<CR>でどのファイルでも動作するように正規化をする
・OやVG>等を行う際、順番に気をつける(どのファイルでもちゃんと動作するように
するための安全装置)

これを:argdoで一気に複数ファイルに適応する場合は、
一度:edit!で変更前の状態に戻してからにする。
これを忘れてしまうと、:コマンド記録時とargdo実行時で合計２回実行されてしまう。
なお、一つずつ変更を加える場合は、qA:nextqを加えることで、１バッファずつ
適応することができる。
もちろん、22@aとすることで一気に複数に適応することもできる。
なお、複数のファイルに変更を加える場合は、
:wall
を使うと簡単(:argdo writeと:wallは厳密には別物)

TIP70: イテレーターを利用したマクロ
/macros/incremental.txt
行頭にインクリメントをしたかったとする。
ここではExpressionレジスタをつかって実現する(つまりvimscript)
~~プログラムのおさらい~~
let i = 1で初期化
インクリメントするときは
i++
ではなく
let i += 1
であることに注意。
つまりletは宣言だけではなく、変数操作をする際も必ず必要になる。
挿入モード中に<C-r>=とすると数式やプログラムの処理結果を入れることができる。
ここで変数iの値を入れると、iの値が入力される(<C-r>=i)
<CR>で数式やプログラムの入力を完了する。
以上のことを踏まえマクロを組むと以下のようになる。
:let i=1qaI<C-r>=i<CR>)<SPC><C-[>j:let i += 1<SPC>q
完成したら、後は99@aとかで実行すれば一気に複数行
連番を前置するマクロが完成する。

:reg {register} マクロの確認
:put {register} マクロ内容を貼り付ける

なお、これはレジスタに単に格納されているだけなので、
"{register}pでも貼り付け可能だが、これでは単に現在行に貼り付けるので、
カーソルにテキストがあった場合は思うような表示にならない。
そのため、:putコマンドを使うことで一行下に挿入できるようにしている。

編集が終わったら
0"ay$
でaレジスタに編集した内容を格納する。
後はこれを使って22@aとすれば一括で適切に変更ができる。

