TIP111: vimキーワード自動補完機能とは
ignorecaseオプションが有効な場合、
vimの検索コマンドは大文字とこもおじを同じ文字として扱う。
これは自動補完も同じく区別しなくなる。
infercaseを有効にすればこの問題を解決することができる
:h infercase
自動補完を起動するあれこれ
<C-n> 汎用のキーワード
<C-x><C-n> 現在のバッファのキーワード
<C-x><C-i> インクルードされているファイルのキーワード
<C-x><C-]> tagsファイルのキーワード
<C-x><C-k> 辞書のルックアップ
<C-x><C-l> 行全体を補完
<C-x><C-f> ファイル名を補完
<C-x><C-o> オムニ補完

TIP112: 自動補完のポップアップメニューを操作する
<C-n> 単語リストから次のマッチを使う(next match)
<C-p> 単語リストから前のマッチを使う(previous match)
<Down> 単語リストから次のマッチを選択する
<Up> 単語リストから前のマッチを選択する
<C-y> 現在選択されているマッチを入力する(yes)
<C-e> 元々入力していたテキストに戻る(exit from autocompletion)
<C-h>|<BS> 現在のマッチから一文字削除する
<C-l> 現在のマッチから一文字追加する
{char} 補完を中止して{char}を入力する
詳細については
:h popupmenu-completion
ちなみに、筆者のおすすめは<C-n><C-p>。
自動補完を起動した後、単語リストの前の要素を選択しスタート地点へ戻る。

TIP113: キーワードの定義元を把握する
自動補完リスト作成で最も簡単な方法は、<C-x><C-n>。
:h compl-current
~~補足~~
別の検索方法として、
:h ctrl-x_ctrl-n
がある。このようにctrlが続く場合は
:h ctrl-{char}_ctrl-{char}
という感じで、間にアンダーバーを入れる。

汎用の自動補完のカスタマイズは、
:set complete-=(+=)w b u t i
のいずれかでできる。
それぞれのオプションの詳細については
:h complete
を参照のこと
TIP114: 辞書を使って単語を自動補完
vim補完の辞書についてのヘルプは
:h compl-dictionary
で確認することができる。
単語リストの有効化方法は
:set spell
TIP115: 行をまるごと自動補完
<C-x><C-l>で行まるごと自動補完することができる。
TIP116: ファイル名の自動補完
<C-x><C-f>でファイル名の自動補完ができる。
<C-x><C-f>をした後に選択した後、また<C-x><C-f>をすると、
続きのパスも補完することができる。
auto_complete/webapp/public/index.html
:cdでwebappに一旦移動し、その後publicフォルダに移動。
その後srcで
js/<C-x><C-f>
でファイル名を保管することができる
直前のディレクトリに戻るには
:cd -
で戻ることができる。ヘルプは以下
:h cd-
TIP117: コンテキストに合わせて自動補完を行う
標準サポートされているものについては
:h compl-omni-filetypes
で確認することができる。
TIP118: 作業結果にスペルチェッカをかけてみよう
:set spellでスペルチェッカを起動することができる。
ジャンプの仕方については
:h ]s
等を参照の事。
スペルチェッカを起動した状態で、
z=
を実行すると置換候補の一覧が表示される。
]s 次のスペルミスにジャンプ
[s 前のスペルミスにジャンプ
z= 現在の単語の修正候補を表示
zg 現在の単語をスペルファイルに追加
zw 現在の単語をスペルファイルから削除
zug 現在の単語に関してzgコマンドもしくはzwコマンドをアンドゥ

TIP119: 別の辞書を使用する
スペルチェッカを有効化すると、デフォルトでは英語辞書に対して
単語の比較が行われる。
spelllangオプションを設定することでこれらを変更可能
:h spelllang
TIP120: スペルファイルに単語を追加する
spellfileオプションを使用して、zg/zwコマンドで追加/削除される単語を
vimが記録するファイルのパスを指定するコットができる
:h spellfile
例えば、以下のファイルを読み込ませることで、独自のスペル定義を
追加することができる。
spell_check/spellfile
TIP121: スペルミスを挿入モードで修正する。
1z=という形でスペルの修正を手早くすることもできるが、
<C-x><C-s>
でインサートモード中に一覧を表示することもできる。

付録A: 自分の好みに合わせてvimをカスタマイズ
すべてのオプションは、
:h option-list
で確認することができる。
基本的には
:set option
でセットする。無効化するときは
:set nooption
といった感じで、noを前置する。
また、
:set option!
でトグルし、
:set option?
で現在のオプションの状態を確認することができる。
:set option&
とすることで、オプションを初期状態に戻す事ができる。
オプションによっては、数字を指定するものもある。
たとえば、
:set tabstop=2
といったものや
:set ts=2 sts=2 sw=2 et
といった感じで複数の代入もできる
オプションは省略できるものが幾つか存在する。
ウィンドウ、もしくはバッファに適応したかったら、
:setlocal
を使うとよい。例えば
:bufdo setlocal tabstop=4
といった使い方ができる。
ウィンドウの場合は
:windo setlocal number
などとすれば良い

A.3 カスタマイズを特定のファイルタイプに適応する
autocmd宣言を使って、イベントを指定することができる
customizations/filetype-indentation.vim

