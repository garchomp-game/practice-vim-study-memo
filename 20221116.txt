:vertを前置することで横分割で開くことができる。
例えば、ヘルプの場合通常は
:h daw
だったのを、
:vert h daw
とすることで横に開ける。
これはヘルプに限らず、ターミナルやその他何かを開くときにも同じなので
色々と使えそう？

文字列検索について
fコマンドを思い出してみよう。
f{char}で検索ができるのであった。(TIP4参照)
繰り返し検索する場合は;(セミコロン)
進みすぎて戻る場合には,(カンマ)

f{char}=次にある{char}までカーソルを末尾方向に移動
F{char}=前にある{char}までカーソルを先頭方向に移動
t{char}=次にある{char}の直前の文字までカーソルを末尾方向に移動
T{char}=前にある{char}の直後の文字までカーソルを先頭方向に移動

削除コマンドについて
dt{char}={char}で指定された文字まで削除する。
dfd=行末まで削除する
筆者は、f{char}とF{char}はノーマルモードで、t{char}とT{char}はd{motion}やc{motion}と
組み合わせて使うことが多い。

例えば、d{motion}とf{char}の組み合わせだと、
df{char}、c{motion}とT{char}だとcT{char}といった具合
オペレーターとモーションの組み合わせてコマンドを使うことを改めて思い出そう。

/motions/search-haiku.txt
ビジュアルモードに入ってから検索を活用するパターン
例えば、文中の特定の文を消したかった場合、
削除開始位置にカーソルを置いた状態で、
v
/{char}<CR>h
d
とすることで、マッチした文字の先頭の手前から消すことができる
※たとえば、/geとした場合、先頭のgが検索対象になるので、
hでgの左に移動して、空白文字を含めて削除すると、ちょうどいい感じになる

motions/template.js
ビジュアルとモーションの組み合わせについて
vから初めて
i=インナー、内側指定
a=アラウンド、外側の空白も含めて指定
つまり
vi>=>の中身の内側あまで、<>は含まれない
va>=<>も含まれる

vitはタグが存在する行に移動する必要がある。
タグが下の行にある場合、タグの中身を指定するためには
vi>
it
として上げる必要がある。
タグごと変える場合は
vi>
at
とすれば良い。

a) ab=カッコで囲まれた範囲
i) ib=カッコの内側の範囲
a} aB=波括弧で囲まれた範囲
i} iB=波括弧の内側
(以後a省略)
i]
i>
i'
i"
i`
it(タグ)

ダブルクォーテーション内やタグの中を変更するサンプル
vi" text<ESC>
vit text<ESC>

iw=現在の単語(word)
aw=現在の単語+前後どちらかの空白
iW=現在の単語(WORD)
aW=現在の単語+前後どちらかの空白
is=現在の分
as=現在の分+前後どちらかの空白
ip=現在の段落
ap=現在の段落+前後どちらかの空行

d{motion}とc{motion}に付いての考察
一般的に、単語を消すときはdaw、
書き換えるときはciwが良いとされている。
これはいったい、どういうことなのだろう？
おさらいしてみよう。
iは、前後の空白を消さない。
aは、前後の空白を消すのであった。

dで単語を消したときは、余計は空白は消して空白の幅を揃えたい。
そのため、aで前後の余分な空白を取り去るといい感じになる。
一方、cで書き換えるときは、前後の空白消えてしまうと
単語の区切りが(英語の場合)わからなくなるので、
前後の空白を消さないiが相性がいい。
