TIP20: ビジュアルモード
viwc: 一単語を選択して修正することができる。cwみたいなもん。
<C-g>でビジュアルモードと選択モードをトグル
基本的にvimのファンであれば、セレクトモードを使うことはあまりないだろう。

ビジュアルモードの有効化について
v: 文字指向のビジュアルモードを有効にする
V: 行指向のビジュアルモードを有効にする
<C-v>: ブロック指向のビジュアルモードを有効にする
gv: 直前のビジュアルな選択範囲を再度選択する
v, V, <C-v>はノーマルモードに戻るのにも使える
ビジュアルモード中にo: 上下の端にジャンプ

visual_mode/fibonacci-malformed.py
Vで行選択して範囲指定したら>でネストを下げる。
繰り返す場合はドットの公式で繰り返せば良い。
Vj>.

visual_mode/list-of-links.html
vitUとgUitの違いについて
vitUの場合、一度ビジュアルモードにしてから大文字にする。この場合、
ドットの公式を使った場合、影響範囲はタグ内の単語ではなく、
同じ位置にある、同じ文字数分だけ。
gUitは、オペレーターとモーションの組み合わ絵から成り立つ。
gU(アッパーケース)にする文字はit(タグ)の範囲内である。と指定することで、
単語の長さが変わっても、適切にタグ内の文字を大文字に変換することができる
chapter-table.txt
<C-v>3j: 矩形選択して3つ下の行まで選択
x..: 空白を削除＠2回繰り返し
gv: もう一度直前の範囲選択
r|: 選択範囲に縦棒を挿入
yyp: コピーして下の行に挿入
Vr-: 行選択して横棒を挿入

r{char}: カーソルの下の文字を直後に指定した{char}に置き換える

visual_mode/sprite.css
矩形選択して文字を置き換えるサンプル。コマンドの組み合わせ自体はシンプルだが、
翌々考えてみると少し挙動が特殊なようにも見える。

the_vim_way/2_foo_bar.js
矩形選択の範囲は、行末の長さがバラバラでも問題ない。
<C-v>jj$A;<ESC>

vimのコマンドラインモード
:[range]delete [x]: 指定した行を削除(してレジスタxに登録
:[range]yank [x]: 指定した行(をレジスタxに)ヤンク
:[line]put [x]: 指定した行の後にレジスタxをプット
:[range]copy {address}:指定した行を{address}で指定される行の下にコピー
:[range]mode {address}: 指定した行を、{address}で指定される行の下に移動
:[range]join: 指定した行を連結
:[range]normal {commands}: 指定した各業に対してノーマルモードの{commands}を実行
:[range]substitute/{pattern}/{string}/{flags}: 指定した各行で、{pattern}がアレばそれを{string}に置換
:[range]global/{pattern}/{cmd}:指定した行の内、{pattern}がマッチするすべての行で、Exコマンド{cmd}を実行

exコマンドについて
:print, pjoin, :delete等の多彩なコマンドがexから引き継がれて今もなお使えるようになっている。
:printの省略形として、数字の後にpをつけることができる


