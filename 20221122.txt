TIP89: 置換のたびに確認する
確認を逐一するためには、cフラグを使うと良い
example :%s/{pattern}/{text}/gc

TIP90: 直前の置換パターンを流用する
:%s/\v'(([^']|'\w)+)'/"\1"/g
このコマンドは、以下の２つに分解できる
/\v'(([^']|'\w)+)'
:%s//"\1"/g
検索コマンドと置換コマンドを分割して考えたほうが、
見通しが良くなるだけでなく、修正もしやすい。
検索部分だけを集中して修正すればいいので、影響範囲とか気にせず
何度でも実験できる。

また、パターンは全部記述しなくても別にいいわけで、
単に*に当たる部分をvimスクリプトを使ってマッピングしてあげれば
楽に検索できるようになるわけだ。

コマンドモードから直前の検索を呼び出したいのであれば
<C-r>/
で呼び出すことができる、検索とコマンドを統合したいときは
これを使えば合体することができる。

TIP91: レジスタの内容を使って置換を行う
~~参照渡しと値渡しについて~~

値渡し：<C-r>{register}
参照渡し：\=@{register}
・実はマクロは、単にレジスタにコマンドが格納されているだけ
・@を使うことで、値を参照することができる。

~~比較してみよう~~
:%s/Pragmatic Vim/Practical Vim/g
これを以下のコマンドシーケンスと比較してみよう。
:let @/='Pragmatic vim'
:let @a='Practical Vim'
:%s//\=@a/g
ちなみに、ここで言う@a='practical Vim'は、"ayとかでヤンクしたのと
同じ状態。つまり、
Practical Vim
の先頭にカーソルがあった場合、
fPvee"ay
した状態と同じになる。

この方法のいいところは、レジスタaの内容を変えるだけで、様々な
置換ができるようになることだ。
変えるべき場所は@/と@aだけ、@/は単純に普通に検索していれば
自動的に格納される。

TIP92: 直前の置換コマンドを繰り返す
:%sとやるべき所、間違えて:sとしても心配はいらない。
g&で繰り返せばいいだけ。
:h g&
g&は、%s//~/&と同義である。

これを使って、
substitution/mixin.js
:%s/Name/Number/g
とか間違えてやっちゃっても、
u
で修正して、
gv
:&&
で戻せる。
&&で直前の置換コマンドを実行することができる。

~~寄り道~~
ちなみに何だけど、これを本来一発で実行するためには
VjjyPgv:s/Name/Number
で実行できる

TIP93: 部分マッチを使ってCSVのフィールドを入れ替える
\n記法を使うことで、位置を入れ替えたりとかもできる。

これを活用して
substitution/subscribers
\v^([^,]*),([^,]*),([^,]*)
%s//\3,\2,\1
といった使い方ができる。

